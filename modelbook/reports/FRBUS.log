Traceback (most recent call last):
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ibhan\miniconda3\envs\mfbook\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
mfrbus, basedf =  model.modelload('mfrbusvar.pcim')
res = mfrbus(basedf,'2020q1','2025q4',silent=1,stats=0)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mFileNotFoundError[0m                         Traceback (most recent call last)
[1;32mC:\modelflow2\modelflow\modelclass.py[0m in [0;36mmodelload[1;34m(cls, infile, funks, run, keep_json, default_url, **kwargs)[0m
[0;32m   4736[0m         [1;32mtry[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 4737[1;33m             [1;32mwith[0m [0mopen[0m[1;33m([0m[0minfile[0m[1;33m,[0m [1;34m'rt'[0m[1;33m)[0m [1;32mas[0m [0mf[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   4738[0m                 [0minput[0m [1;33m=[0m [0mjson[0m[1;33m.[0m[0mload[0m[1;33m([0m[0mf[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'mfrbusvar.pcim'

During handling of the above exception, another exception occurred:

[1;31mHTTPError[0m                                 Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_23732\3961368901.py[0m in [0;36m<cell line: 1>[1;34m()[0m
[1;32m----> 1[1;33m [0mmfrbus[0m[1;33m,[0m [0mbasedf[0m [1;33m=[0m  [0mmodel[0m[1;33m.[0m[0mmodelload[0m[1;33m([0m[1;34m'mfrbusvar.pcim'[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      2[0m [0mres[0m [1;33m=[0m [0mmfrbus[0m[1;33m([0m[0mbasedf[0m[1;33m,[0m[1;34m'2020q1'[0m[1;33m,[0m[1;34m'2025q4'[0m[1;33m,[0m[0msilent[0m[1;33m=[0m[1;36m1[0m[1;33m,[0m[0mstats[0m[1;33m=[0m[1;36m0[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\modelflow2\modelflow\modelclass.py[0m in [0;36mmodelload[1;34m(cls, infile, funks, run, keep_json, default_url, **kwargs)[0m
[0;32m   4746[0m [1;33m[0m[0m
[0;32m   4747[0m             [0mprint[0m[1;33m([0m[1;34mf'Open file from URL:  {urlfile}'[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 4748[1;33m             [1;32mwith[0m [0murllib[0m[1;33m.[0m[0mrequest[0m[1;33m.[0m[0murlopen[0m[1;33m([0m[0murlfile[0m[1;33m)[0m [1;32mas[0m [0mf[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   4749[0m                 [0minput[0m [1;33m=[0m [0mjson[0m[1;33m.[0m[0mload[0m[1;33m([0m[0mf[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   4750[0m [1;33m[0m[0m

[1;32m~\miniconda3\envs\mfbook\lib\urllib\request.py[0m in [0;36murlopen[1;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[0;32m    212[0m     [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    213[0m         [0mopener[0m [1;33m=[0m [0m_opener[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 214[1;33m     [1;32mreturn[0m [0mopener[0m[1;33m.[0m[0mopen[0m[1;33m([0m[0murl[0m[1;33m,[0m [0mdata[0m[1;33m,[0m [0mtimeout[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    215[0m [1;33m[0m[0m
[0;32m    216[0m [1;32mdef[0m [0minstall_opener[0m[1;33m([0m[0mopener[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\mfbook\lib\urllib\request.py[0m in [0;36mopen[1;34m(self, fullurl, data, timeout)[0m
[0;32m    521[0m         [1;32mfor[0m [0mprocessor[0m [1;32min[0m [0mself[0m[1;33m.[0m[0mprocess_response[0m[1;33m.[0m[0mget[0m[1;33m([0m[0mprotocol[0m[1;33m,[0m [1;33m[[0m[1;33m][0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    522[0m             [0mmeth[0m [1;33m=[0m [0mgetattr[0m[1;33m([0m[0mprocessor[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 523[1;33m             [0mresponse[0m [1;33m=[0m [0mmeth[0m[1;33m([0m[0mreq[0m[1;33m,[0m [0mresponse[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    524[0m [1;33m[0m[0m
[0;32m    525[0m         [1;32mreturn[0m [0mresponse[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\mfbook\lib\urllib\request.py[0m in [0;36mhttp_response[1;34m(self, request, response)[0m
[0;32m    630[0m         [1;31m# request was successfully received, understood, and accepted.[0m[1;33m[0m[1;33m[0m[0m
[0;32m    631[0m         [1;32mif[0m [1;32mnot[0m [1;33m([0m[1;36m200[0m [1;33m<=[0m [0mcode[0m [1;33m<[0m [1;36m300[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 632[1;33m             response = self.parent.error(
[0m[0;32m    633[0m                 'http', request, response, code, msg, hdrs)
[0;32m    634[0m [1;33m[0m[0m

[1;32m~\miniconda3\envs\mfbook\lib\urllib\request.py[0m in [0;36merror[1;34m(self, proto, *args)[0m
[0;32m    559[0m         [1;32mif[0m [0mhttp_err[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    560[0m             [0margs[0m [1;33m=[0m [1;33m([0m[0mdict[0m[1;33m,[0m [1;34m'default'[0m[1;33m,[0m [1;34m'http_error_default'[0m[1;33m)[0m [1;33m+[0m [0morig_args[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 561[1;33m             [1;32mreturn[0m [0mself[0m[1;33m.[0m[0m_call_chain[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    562[0m [1;33m[0m[0m
[0;32m    563[0m [1;31m# XXX probably also want an abstract factory that knows when it makes[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\mfbook\lib\urllib\request.py[0m in [0;36m_call_chain[1;34m(self, chain, kind, meth_name, *args)[0m
[0;32m    492[0m         [1;32mfor[0m [0mhandler[0m [1;32min[0m [0mhandlers[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    493[0m             [0mfunc[0m [1;33m=[0m [0mgetattr[0m[1;33m([0m[0mhandler[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 494[1;33m             [0mresult[0m [1;33m=[0m [0mfunc[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    495[0m             [1;32mif[0m [0mresult[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    496[0m                 [1;32mreturn[0m [0mresult[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\envs\mfbook\lib\urllib\request.py[0m in [0;36mhttp_error_default[1;34m(self, req, fp, code, msg, hdrs)[0m
[0;32m    639[0m [1;32mclass[0m [0mHTTPDefaultErrorHandler[0m[1;33m([0m[0mBaseHandler[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    640[0m     [1;32mdef[0m [0mhttp_error_default[0m[1;33m([0m[0mself[0m[1;33m,[0m [0mreq[0m[1;33m,[0m [0mfp[0m[1;33m,[0m [0mcode[0m[1;33m,[0m [0mmsg[0m[1;33m,[0m [0mhdrs[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 641[1;33m         [1;32mraise[0m [0mHTTPError[0m[1;33m([0m[0mreq[0m[1;33m.[0m[0mfull_url[0m[1;33m,[0m [0mcode[0m[1;33m,[0m [0mmsg[0m[1;33m,[0m [0mhdrs[0m[1;33m,[0m [0mfp[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    642[0m [1;33m[0m[0m
[0;32m    643[0m [1;32mclass[0m [0mHTTPRedirectHandler[0m[1;33m([0m[0mBaseHandler[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;31mHTTPError[0m: HTTP Error 404: Not Found
HTTPError: HTTP Error 404: Not Found

